import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import dash_bootstrap_components as dbc
import pandas as pd
import dash_table
import plotly.graph_objects as go
import numpy as np
from app import app
df_fp = pd.read_csv('../output/dataMining/FP_Growth_ar.csv')
def generate_table(dataframe, max_rows=10):
    return dbc.Table([
        html.Thead(
            html.Tr([html.Th(col) for col in dataframe.columns])
        ),
        html.Tbody([
            html.Tr([
                html.Td(dataframe.iloc[i][col]) for col in dataframe.columns
            ]) for i in range(min(len(dataframe), max_rows))
        ])
    ],
        bordered=True,
        hover=True,
    responsive=True,
    striped=True,
    size="md",id="dtBasicExample")


N = 100
random_x = np.linspace(0, 1, N)
random_y0 = np.random.randn(N) + 5
random_y1 = np.random.randn(N)
random_y2 = np.random.randn(N) - 5

# Create traces
fig = go.Figure()
fig.add_trace(go.Scatter(x=random_x, y=random_y0,
                    mode='lines',
                    name='support'))
fig.add_trace(go.Scatter(x=random_x, y=random_y1,
                    mode='lines+markers',
                    name='confiance'))
fig.update_yaxes(title_text='Time(s)')
fig.update_xaxes(title_text='Value')
fig.layout.paper_bgcolor = '#fafafa'




layout=html.Div(children=[
        dbc.Row(html.H1('FP-growth',style={
            'text-align' : 'center'

        },className="mx-auto mt-20"))
        ,
    html.Hr(),

    dbc.Row(html.H2('rule generated by FP-growth',style={
            'text-align' : 'center'

        },className="mx-auto mt-20")),
    # dbc.Input(
    #     id="input_text",
    #     type="text",
    #     placeholder="row number",
    #     value="10"
    #     ,
    # ),

      #  html.Div(id="fp_tab")
        html.Div(dash_table.DataTable(
        id='datatable-paging',
        columns=[{"name": i, "id": i} for i in df_fp.columns],
        data=df_fp.to_dict("records"),
        editable=False,
        filter_action="native",
        sort_action="native",
        sort_mode="multi",
        page_action="native",
        page_current= 0,
        page_size= 10,
        style_data_conditional=[
        {
            'if': {'row_index': 'odd'},
            'backgroundColor': 'rgb(248, 248, 248)'
        }
        ],
        style_header={
        'backgroundColor': 'rgb(230, 230, 230)',
        'fontWeight': 'bold'
        }
    ),className="container"),
    html.Hr(),

    dbc.Row(html.H2('line chart of excution time by confidence and support', style={
        'text-align': 'center'

    }, className="mx-auto my-20"))
    ,dbc.Row(dbc.Col(dcc.Graph(figure=fig)))

      ])

#@app.callback(
#    Output("fp_tab", "children"),
#    [Input("input_text", "value")]
#)
#def cb_render(vals):
#   return generate_table(df_fp,max_rows=int(vals))


